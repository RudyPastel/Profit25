qqnorm((log(mtcars$mpg[mtcars$am == 1])-mean(log(mtcars$mpg[mtcars$am == 1])))/sd(log(mtcars$mpg[mtcars$am == 1])))
abline(0,1)
t.test(mpg~am,data = mtcars,paired = FALSE,var.equal = FALSE)
t.test(log(mtcars$mpg)~log(mtcars$am),data = mtcars,paired = FALSE,var.equal = FALSE)
plot(lm(mpg~am,data=mtcars))
summary(lm(mpg~am,data=mtcars))
avr.auto -avr.manual
avr.auto -avr.manu
t.test(mpg~am,data = mtcars,paired = FALSE,var.equal = FALSE)
summary(lm(mpg~am,data=mtcars))
summary(lm(mpg~am-1,data=mtcars))
lm(mpg~am-1,data=mtcars)
plot(lm(mpg~am-1,data=mtcars))
plot(lm(mpg~am,data=mtcars))
1100+30*qt(.95)
1100+30*qt(.95,df = 8)
1100+c(-1,1)*30*qt(.95,df = 8)
1100+c(-1,1)*30*qt(.975,df = 8)
2/qt(.975,8)
2/qt(1-.975,8)
2/qt(.975,9)
2/qt(.975,7)
2/qt(.975,8)
(2/qt(.975,8))^2
df
d
sn = .6; mn = 3
mo = 5; so = .56
s
sigma
sigma =sqrt(sn^2/nn +so^2/no)
nn = 10 ;no=10
sigma =sqrt(sn^2/nn +so^2/no)
d.f
dfree = (sn^2/nn +so^2/no)^2/((sn^2/nn)^2+(so^2/no)^2)
dfree
mn-mo +c(-1,1)*qt(.975,df = dfree)
mn-mo +c(-1,1)*qt(.975,df = dfree)*sigma
mn-mo +c(-1,1)*qt(p = .975,df = 10+10-2)*sqrt(1/10+1/10)*sqrt(((10-1)*sn^2+(10-1)*so^2)/(01+01-2))
mn-mo +c(-1,1)*qt(p = .975,df = 10+10-2)*sqrt(1/10+1/10)*sqrt(((10-1)*sn^2+(10-1)*so^2)/(10+10-2))
mn-mo +c(-1,1)*qt(p = .975,df = 10+10-2)*sqrt(1/nn+1/1no)*sqrt(((nn-1)*sn^2+(no-1)*so^2)/(no+nn-2))
mn-mo +c(-1,1)*qt(p = .975,df = 10+10-2)*sqrt(1/nn+1/no)*sqrt(((nn-1)*sn^2+(no-1)*so^2)/(no+nn-2))
mn-mo +c(-1,1)*qt(p = .975,df = nn+no-2)*sqrt(1/nn+1/no)*sqrt(((nn-1)*sn^2+(no-1)*so^2)/(no+nn-2))
so
sqrt(.68)
so = sqrt(.68)
sqrt(.6)
sn
sn = sqrt(.6)
mn-mo +c(-1,1)*qt(p = .975,df = nn+no-2)*sqrt(1/nn+1/no)*sqrt(((nn-1)*sn^2+(no-1)*so^2)/(no+nn-2))
6-4 +c(-1,1)*qnorm(p = .975)*sqrt(1/nn+1/no)*sqrt(((nn-1)*sn^2+(no-1)*so^2)/(no+nn-2))
nn = 100; no=100; sn=.5;so=2;
6-4 +c(-1,1)*qnorm(p = .975)*sqrt(1/nn+1/no)*sqrt(((nn-1)*sn^2+(no-1)*so^2)/(no+nn-2))
-3-1 +c(-1,1)*qt(p = .95,df = 9+9-2)*sqrt(1/9+1/9)*sqrt(((9-1)*1.5^2+(9-1)*1.8^2)/(9+9-2))
-2/qt(p = .975,df = 7)
2/qt(p = .975,df = 7)
2/qt(p = .975,df = 8)*sqrt(9)
1100+c(-1,1)*30*qt(.975,df = 8)
1100+c(-1,1)*30*qt(.975,df = 8)/sqrt(9)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(mtcars$mpg)
lambda = 5
n = 1000
mean(rexp(n, lambda))
lambda = 1/5
n = 1000
mean(rexp(n, lambda))
lambda = 1/5
n = 10000
mean(rexp(n, lambda))
mc = 1000
A = sapply(X = 1:mc,FUN = function(x){mean(rexp(n, lambda))})
A
As expected, the average and variance of A are respectively `r mean(A)` and `r sd(A)` which are both close to `r 5`.
sd(A)`
sd(A)
sd(A)*999
sd(A)*sqrt(1000)
sd(A)*sqrt(1000*40)
sd(A)*sqrt(40)
1/(5*sqrt(40))
mc = 100000
A = sapply(X = 1:mc,FUN = function(x){mean(rexp(n, lambda))})
mean(A)
sd(A)
sdA = 1/(5*sqrt(40))
sdA
hist(A)
qnorm(A,mean = 1/lambda,sd = 1/(5*sqrt(40)))
qpnorm(A,mean = 1/lambda,sd = 1/(lambda*sqrt(40)))
qqnorm(A,mean = 1/lambda,sd = 1/(lambda*sqrt(40)))
mc = 1000
A = sapply(X = 1:mc,FUN = function(x){mean(rexp(n, lambda))})
mc = 1000
A = sapply(X = 1:mc,FUN = function(x){mean(rexp(n, lambda))})
qqnorm((A-mean(A))/sd(A),mean = 1/lambda,sd = 1/(lambda*sqrt(40)))
warnings()
hist(A)
qqnorm((A-mean(A))/sd(A))
abline(a = 0,b = 1)
abline(a = 0,b = 1,col="red")
hist(A,breaks = 20)
mean(rexp(n, lambda))
lambda = 1/5
n = 40
mean(rexp(n, lambda))
mean(rexp(n, lambda))
mean(rexp(n, lambda))
mean(rexp(n, lambda))
mean(rexp(n, lambda))
mean(rexp(n, lambda))
ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
summary(ToothGrowth)
pairs(ToothGrowth)
boxplot(len ~ dose)
boxplot(len ~ dose,data = ToothGrowth)
boxplot(len ~ dose| supp,data = ToothGrowth)
require(ggplot2)
require(lattice)
xyplot(x = len ~ dose| supp,data = ToothGrowth)
t.test(formula = len ~ supp +dose)
t.test(formula = len ~ supp |dose)
t.test(formula = len ~ supp |dose,data = ToothGrowth)
t.test(formula = len ~ supp ,data = ToothGrowth)
t.test(formula = len ~ supp ,data = ToothGrowth,subset = supp == "OJ")
idx = (ToothGrowth$supp == "OJ") & (ToothGrowth$dose != 2)
table(idx)
t.test(formula = len ~ supp ,data = ToothGrowth,subset = idx)
t.test(formula = len ~ supp ,data = ToothGrowth[idx,])
tooth
tooth = ToothGrowth[idx,]
tooth$supp
t.test(formula = len ~ supp ,data = ToothGrowth,subset = supp == "OJ")
t.test(formula = len ~ dose ,data = ToothGrowth,subset = supp == "OJ")
tooth
tooth$dose
t.test(formula = len ~ dose ,data = ToothGrowth)
t.test(formula = len ~ dose ,data = tooth)
idx = (ToothGrowth$supp == "OJ") & (ToothGrowth$dose != 0.5)
tooth = ToothGrowth[idx,]
t.test(formula = len ~ dose ,data = tooth)
lm(mpg~wt+cyl,data = mtcars)
summary(lm(mpg~wt+cyl,data = mtcars))
table(mtcars$cyl)
class(mtcars$cyl)
summary(lm(mpg~wt+factor(cyl),data = mtcars))
summary(lm(mpg~wt+factor(cyl),data = mtcars))
summary(lm(mpg~factor(cyl),data = mtcars))
summary(lm(mpg~factor(cyl)*wt,data = mtcars))
vif(lm(mpg~factor(cyl)*wt,data = mtcars))
update
fit1 = lm(mpg~factor(cyl)+wt,data = mtcars)
fit1
fit2 = lm(mpg~factor(cyl)*wt,data = mtcars)
fit2
anova(fit1)
anova(fit1,fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
leverage
hat
hatvalues(lm(y~x))
influence.measures(lm(y~x))
influence(lm(y~x))
plot(x,y)
x
y
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
influence(lm(y~x))
influence.measures(lm(y~x))
plot(lm(y~x))
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
require(lattice)
bwplot(x = len ~ dose| supp,data = ToothGrowth)
t.test(formula = len ~ supp ,data = subset(x = ToothGrowth,subset = dose== .5))
subset(x = ToothGrowth,subset = dose== .5))
subset(x = ToothGrowth,subset = dose== .5)
t.test(formula = len ~ supp ,data = subset(x = ToothGrowth,subset = dose== 1.0))
t.test(formula = len ~ supp ,data = subset(x = ToothGrowth,subset = dose== 2.0))
getMethod("plot")
getMethod("mean")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
?createDataPartition
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
library("AppliedPredictiveModeling")
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex
adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
structure(trainIndex)
structure(training)
struct(training)
name(training)
names(training)
summary(training)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,col = training$Cement)
Hmisc
install.packages("Hmisc")
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$Cement))
Hmisc:::cut2(training$Cement)
summary(training)
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$Age))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$FineAggregate))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$CoarseAggregate))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$Superplasticizer))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$Water))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$FlyAsh))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$BlastFurnaceSlag))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$Cement))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$Age))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$Age))
plot(training$CompressiveStrength,col = Hmisc:::cut2(training$FlyAsh))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
(training$Superplasticizer)
table(training$Superplasticizer)
min(training$Superplasticizer)
table(training$Superplasticizer)["0"]
hist(table(training$Superplasticizer))
hist(table(training$Superplasticizer),breaks = 50)
hist(log(1+training$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grep(pattern = "IL",x = names(training),value = TRUE)
grep(pattern = "\<IL",x = names(training),value = TRUE)
grep(pattern = "\\<IL",x = names(training),value = TRUE)
donnee = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)]
preProcess(x = donnee,method = "pca",thresh = .80)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
donnee_original = cbind(training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],diagnosis)
donnee = training[inTrain,grep(pattern = "\\<IL",x = names(training),value = TRUE)]
preProcess(x = donnee,method = "pca",thresh = .80)
donnee_original = cbind(training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],diagnosis)
donnee_original = cbind(training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],diagnosis[inTrain])
train(x = donnee_original,method = "glm")
train(x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],y = diagnosis[inTrain],method = "glm")
install.packages("e1071")
train(x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],y = diagnosis[inTrain],method = "glm")
fit <- train(x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],y = diagnosis[inTrain],method = "glm")
caret:::predict()
predict(object = fit,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)])
predict(object = fit,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)])
confusionMatrix(data = predict(object = fit,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],),reference = diagnosis[-inTrain]
)
confusionMatrix(data = predict(object = fit,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],),reference = diagnosis[-inTrain])
fit2 <- train(x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],y = diagnosis[inTrain],method = "glm",preProcess = "pca",thresh = .80)
fit2 <- train(x = preProcess(method = "pca",thresh = .80,x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)]),y = diagnosis[inTrain],method = "glm")
warnings()
preProcess(method = "pca",thresh = .80,x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)])
donnee_original
names(donnee_original)
fit2 <- train(x = preProcess(method = "pca",thresh = .80,x = donnee_original,y = diagnosis[inTrain],method = "glm")
fit2 <- train(x = preProcess(method = "pca",thresh = .80,x = donnee_original),form = diagnosis[inTrain]~. ,method = "glm")
fit2 <- train(x = preProcess(method = "pca",thresh = .80,x = donnee_original),form = diagnosis[inTrain]~. ,method = "glm")
preProcess(method = "pca",thresh = .80,x = donnee_original)
preProcess(method = "pca",thresh = .80,x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)])
donnee_pca = preProcess(method = "pca",thresh = .80,x = training[,grep(pattern = "\\<IL",x = names(training),value = TRUE)])
fit2 <- train(x = donnee_pca,form = diagnosis[inTrain]~. ,method = "glm")
fit2 <- train(x = donnee_pca,y = diagnosis[inTrain] ,method = "glm")
confusionMatrix(data = predict(object = fit2,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],),reference = diagnosis[-inTrain])
predict(object = fit2,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],)
predict(object = fit2,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)])
predict(object = fit2,newdata = donnee_pca)
confusionMatrix(data = predictionFunction(object = fit2,newdata = testing[,grep(pattern = "\\<IL",x = names(training),value = TRUE)],),reference = diagnosis[-inTrain])
fit <- train(x = training,y = diagnosis[inTrain],method = "glm")
warnings()
rm(list = ls())
source('~/Documents/R/PracticalMachineLearning/week2.R', echo=TRUE)
confusionMatrix(predict(object = fit,newdata = testing),diagnosis[-inTrain])
predict(object = fit,newdata = testing)
confusionMatrix(predict(object = fit,newdata = testing),diagnosis[-inTrain])
confusionMatrix(data = predict(object = fit,newdata = testing),reference = diagnosis[-inTrain])
fit <- train(x = training,y = diagnosis[inTrain],method = "glm",preProcess = "pca",thresh = .80)
confusionMatrix(data = predict(object = fit,newdata = testing),reference = diagnosis[-inTrain])
inTrain
dim(adData)
3/4*333
diagnosis[inTrain]
info = cbind(diagnosis[inTrain],training)
names(info)
source('~/Documents/R/PracticalMachineLearning/week2.R', echo=TRUE)
fit <- train(x = training[,variables],y = diagnosis[inTrain],method = "glm",preProcess = "pca",thresh = .80)
preProc <- preProcess(x = training[,variables],method = "pca",thresh = .80,newdata = testing)
preProc
class(preProc)
predict(preProc,training[,variables])
fit <- train(x = predict(preProc,training[,variables]),
y = diagnosis[inTrain])
fit <- train(x = predict(preProc,training[,variables]),method = "glm",
y = diagnosis[inTrain])
confusionMatrix(data = predict(object = fit,newdata = predict(preProc,testing[,variables])),
reference = diagnosis[-inTrain])
source('~/.active-rstudio-document', echo=TRUE)
sqrt(53^2+10^2)
sqrt(47^2+30^2)
sqrt(52^2+13^2)
sqrt(48^2+27^2)
sqrt(44^2+15^2)
sqrt(56^2+15^2)
sqrt(57^2+5^2)
sqrt(43^2+25^2)
sqrt(44^2+25^2)
96^(1/3)
mm
mm = function(s,p){}
96*10^6*p
p
p=4
96*10^6*p
e
source('~/Documents/R/MiningMassiveDatasets/week2C.R', echo=TRUE)
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/.active-rstudio-document')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/.active-rstudio-document')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/.active-rstudio-document')
mm(s = 3*10^8,p = 7.5*10^8)
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mm(s = 3*10^8,p = 7.5*10^8)
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/.active-rstudio-document')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/Documents/R/MiningMassiveDatasets/week2C.R')
mm(s = 3*10^8,p = 7.5*10^8)
mm(s = 5*10^8,p = 10^10)
mm(s = 10^9,p = 2*10^10)
mm(s = 10^8,p = 5.4*10^8)
source('~/.active-rstudio-document')
P(3*10^8)
P(5*10^8)
P(10^9)
P(10^8)
source('~/.active-rstudio-document')
P(3*10^8)
P(5*10^8)
P(10^9)
P(10^8)
100 %% 4
100 %% 3
100 %% 5
100 %% 7
100 %/% 7
source('~/.active-rstudio-document', echo=TRUE)
p
u
p = 100
v = 25
u = 4
p = p - v*u
p
j = v*u
j
a = 2.5
r = u * a
r
u * a
u = (r+p) %/% v
p
10 %/% 25
10 %% 25
100 %% 25
25 %/% 100
25 %/% 10
25 %/% 100
110 %/% 25
110 %% 25
p
source('~/.active-rstudio-document', echo=TRUE)
p
rudy
rudy ="pastel"
c(rudy = 4)
c(eval(rudy) = 4)
r = c("0" = 0)
r
r[1]
r[1+1]
r[1+1]=3
r
setwd("~/Documents/R/jeremy")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
derniereSemaineDeReinvestissement
mise
cout_part
nbr_cycle
salaire_part
derniereSemaineDeReinvestissement
shiny::runApp()
shiny::runApp()
Argent[semaine,"revenu"] + Argent[semaine-1,"portemonnaie"]
Argent[semaine,"revenu"]
salaire_part
sum(Part[semaine-1,paste0("age_",0:13)])
semaine
Argent[semaine,"revenu"]
(Argent[semaine,"revenu"] + Argent[semaine-1,"portemonnaie"])
Argent[semaine,"retrait"] = (Argent[semaine,"revenu"] + Argent[semaine-1,"portemonnaie"])
Argent[semaine,"retrait"]
shiny::runApp()
shiny::runApp()
2:1
shiny::runApp()
shiny::runApp()
